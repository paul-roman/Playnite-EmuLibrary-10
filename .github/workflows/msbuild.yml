name: MSBuild

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: EmuLibrary.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
permissions: write-all
jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 20
    
    - name: Get Version From Tag
      id: get_version
      uses: battila7/get-version-action@v2
      
    - name: Patch Extension Manifest Version
      uses: Amadevus/pwsh-script@v2
      id: versioner
      with:
        script: |
          $version = '${{steps.get_version.outputs.version-without-v}}'
          ((Get-Content -LiteralPath extension.yaml -Raw) -replace 'Version\s*:\s*\d+\.\d+\.\d+', "Version: $version") | Out-File -Encoding utf8 -LiteralPath extension.yaml

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        body: ${{steps.github_release.outputs.changelog}}
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "EmuLibrary_${{steps.get_version.outputs.major}}_${{steps.get_version.outputs.minor}}_${{steps.get_version.outputs.patch}}.pext"
        asset_name: "EmuLibrary_${{steps.get_version.outputs.major}}_${{steps.get_version.outputs.minor}}_${{steps.get_version.outputs.patch}}.pext"
        asset_content_type: application/zip
